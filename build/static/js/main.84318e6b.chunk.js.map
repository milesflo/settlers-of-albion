{"version":3,"sources":["images/anglo-village.jpg","views/Game.tsx","views/Home.tsx","components/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","players","socket","openSocket","setState","react_default","a","createElement","Fragment","document","addEventListener","keypressHandler","removeEventListener","event","keyCode","console","log","React","Component","Home","style","minHeight","display","justifyContent","flexDirection","alignItems","maxWidth","backgroundImage","concat","VillageSpash","backgroundAttachment","backgroundPosition","backgroundRepeat","backgroundSize","NavBar","overflow","toggleMenu","bind","assertThisInitialized","className","react_router_dom","to","onClick","App","user","components_NavBar","react_router","path","exact","component","Boolean","window","location","hostname","match","root","getElementById","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84318e6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anglo-village.f5dffaac.jpg\";","import React from \"react\"\nimport openSocket from 'socket.io-client';\n\ninterface GameProps {\n  user: Player;\n  serverId: ServerID;\n}\n\ninterface GameState {\n  players: Player[];\n  socket: SocketIOClient.Socket;\n}\n\nclass Game extends React.Component<any, GameState> {\n  state: GameState = {\n    players: [] as Player[],\n    socket: {} as SocketIOClient.Socket\n  }\n\n  constructor(props: any) {\n    super(props);\n\n    const socket = openSocket('http://localhost:3001');\n\n    this.setState({ socket })\n  }\n\n  public render() {\n    return (\n      <>\n        <div>\n          <h1> Game !</h1>\n        </div>\n      </>\n    )\n  }\n\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.keypressHandler)\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.keypressHandler)\n  }\n\n  public keypressHandler(event: KeyboardEvent) {\n    switch(event.keyCode) {\n      // Escape\n      case(27): {\n        console.log(\"Pressed Escape\")\n        break;\n      }\n    }\n  }\n}\n\nexport default Game;\n","import React from \"react\"\nimport VillageSpash from \"../images/anglo-village.jpg\"\n\nconst Home: React.FC = () => (\n  <>\n    <div style={{\n      minHeight: \"calc(100vh - 63px)\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      alignItems: \"center\"\n    }}>\n      <h1>Settlers of Albion</h1>\n      <p style={{\n        maxWidth: \"80vw\"\n      }}>A light-weight, browser-first boardgame inspired by <i>Settlers of Catan</i>.</p>\n    </div>\n    <div style={{\n      backgroundImage: `url(${VillageSpash})`,\n      minHeight: \"300px\",\n      backgroundAttachment: \"fixed\",\n      backgroundPosition: \"center\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }}>\n    </div>\n    <div style={{\n      minHeight: \"100vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      alignItems: \"center\"\n    }}>\n      <h1>Team</h1>\n      <p>Miles Florence &amp; Brenden Satake</p>\n    </div>\n  </>\n)\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface NavBarProps {\n  user?: Player;\n}\n\ninterface NavBarState {\n  overflow: boolean;\n}\n\nclass NavBar extends React.Component<NavBarProps, NavBarState> {\n  state = {\n    overflow: false\n  }\n  constructor(props: NavBarProps) {\n    super(props);\n    this.toggleMenu = this.toggleMenu.bind(this);\n  }\n\n  public render() {\n    return (\n      <header className=\"App-header\">\n        <ul style={{\n          justifyContent: \"left\"\n        }}>\n          <li><Link to=\"/\">Settlers of Albion</Link></li>\n        </ul>\n        <ul style={{\n          justifyContent: \"right\",\n          display: \"flex\"\n        }}>\n          <li><Link to=\"/game\">1</Link></li>\n          <li><button onClick={this.toggleMenu}>â˜°</button></li>\n        </ul>\n      </header>\n    )\n  }\n\n  public toggleMenu() {\n    this.setState({overflow: !this.state.overflow})\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './css/App.css';\nimport Game from './views/Game';\nimport Home from './views/Home';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\n\ninterface AppState {\n  user?: Player;\n}\n\nclass App extends React.Component<any,AppState> {\n  state = {\n    user: {} as Player\n  }\n\n  render() {\n    return (\n      <>\n        <Router>\n          <NavBar user={this.state.user}/>\n          <Route path=\"/\" exact={true} component={Home}/>\n          <Route path=\"/game\" component={Game}/>\n        </Router>\n      </>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<App />, root);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}